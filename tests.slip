;;Quelques tests          -*- mode: lisp-data; coding: utf-8 -*-
2                                       ; ↝ 2
+                                       ; ↝ <function>
(+ 2 4)                                 ; ↝ 6

((fn (x) x) 2)                          ; ↝ 2

(((fn (x) (fn (y) (* x y)))
  3)
 5)                                     ; ↝ 15

(list nil)                              ; ↝ [[]]
(add (add 1 2) nil)                     ; ↝ [[1 . 2]]

(let ((x 1)) x)                         ; ↝ 1

(match (add 1 2) (nil 1) ((add x y) (+ x y))) ; ↝ 3
(match nil (nil 1) ((add x y) (+ x y)))       ; ↝ 1

(let (((f x y) (* (+ x 1) y))) (f 5 6)) ; ↝ 36

(let ((* +) (/ -)) (* 5 (/ 3 1)))       ; ↝ 7 l'ambiguité sur la déclaration des variables avec les opérations crée une ambiguité avec
;les vraies opérations ceci ne nous donne donc pas le résultat attendu 

(let ((y +) (x -)) (y 5 (x 3 1))) ;7  essaie du test précédent qui marche mais avec comme déclaration de variable autre chose que les opérations définies

(*(+ (+ 9 2) (- 1 7)) 3) ;15 test sur l'appel de plusieurs fonctions

((fn (-) -) (+ 4 7))  ;; 11  tester si la variable de référence de la définition de fonction peut etre une opération

(add nil nil) ; [[]]
(list nil nil) ; [[] []] comparer list et add avec les memes arguments pour voir s'il donne la meme chose

(list 1 2 3 4) ; [1 2 3 . 4]
(list 1 2 3 4 nil) ;[1 2 3 4] list avec un nil a la fin et l'autre sans, pour s'assurer qu'ils ne donnent pas le meme resultat

(add 7 (add 9 nil));; [7 9]
(list 7 9) ;; [7 9] devrait donner le meme resultat que (add 7 (add 9 nil))

(add nil 2) ; [[] . 2]
(add(add (add 5 1) 6)7) ; [[[5 . 1] . 6] . 7]

(let ((y +) (x -)( z 9)) (y 5 (x z 1))) ; 13
(let ((/ nil)) /) ; []

(let ((/ 8) (x 3)) (* / x)) ; 24 // sur une opération comme étant une déclaration de variable

(match (add 7 2) (nil 0) ((add / -) (+ / -))) ; 9 les opértaions - + / * peuvent etre considéré comme des variables 

(match (add nil 4) (nil 0) (add 5 6) (nil 2) ((add 0 nil) 7) ((add x nil) x)) ;7 // test sur l'ajout de plusieurs appel de fonction
